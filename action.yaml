name: "SKIP Security Scans"
branding:
  icon: "compass"
  color: "blue"
description: "GitHub action for running different Security Scans, that should be run before deploying to SKIP"
inputs:
  image_url:
    description: "An image_url of the form registry/repository:tag or registry/repository@digest"
    required: false
  trivy:
    description: "A boolean which determines whether or not Trivy vulnerability scan will be run. Defaults to true"
    required: false
    default: "true"
  tfsec:
    description: "A boolean which determines whether or not TFSec security scan will be run. Defaults to true"
    required: false
    default: "true"
  allow_severity_level:
    description: 'A string which determines the highest level of severity the security scans can find while still succeeding workflows. Only "medium", "high" and "critical" values are allowed. Note that these values are case sensitive.'
    required: false
    default: medium

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Check severity level
      if: inputs.allow_severity_level != 'medium' && inputs.allow_severity_level != 'high' && inputs.allow_severity_level != 'critical'
      shell: bash
      run: |
        echo "Error: The input 'allow_severity_level' was not one of the allowed strings, 'high', 'critical' or 'medium'. Found: "$ALLOW_SEVERITY_LEVEL".";
        exit 1;
    #
    # TFSec
    #

    - name: Run tfsec
      id: tfsec
      if: inputs.tfsec == 'true' && github.event.pull_request.draft == false
      uses: aquasecurity/tfsec-sarif-action@21ded20e8ca120cd9d3d6ab04ef746477542a608
      with:
        sarif_file: tfsec.sarif

    - name: Upload SARIF file
      if: inputs.tfsec == 'true' && github.event.pull_request.draft == false
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: tfsec.sarif

    #
    # Trivy
    #

    - name: Log Into GHCR Registry with Token
      if: inputs.trivy == 'true' && inputs.image_url != '' && github.event.pull_request.draft == false
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Pull Image to Scan from Docker
      if: inputs.trivy == 'true' && inputs.image_url != '' && github.event.pull_request.draft == false
      shell: bash
      run: docker pull ${{ inputs.image_url }}

    - name: Run Trivy Vulnerability Scanner on Image
      if: inputs.trivy == 'true' && inputs.image_url != '' && github.event.pull_request.draft == false
      uses: aquasecurity/trivy-action@1f0aa582c8c8f5f7639610d6d38baddfea4fdcee
      with:
        image-ref: ${{ inputs.image_url }}
        format: sarif
        output: trivy-results.sarif
        severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
        timeout: 15m

    - name: Upload Trivy Scan Results to GitHub Security Tab
      if: inputs.trivy == 'true' && inputs.image_url != '' && github.event.pull_request.draft == false
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif

    #
    # Check results
    #

    - name: Set high and critical severity outputs
      if: inputs.trivy == 'true' || inputs.tfsec == 'true'
      id: severity_check_outputs
      shell: bash
      run: |
        content_header="Accept: application/vnd.github+json"
        auth_header="Authorization: Bearer ${{ github.token }}"
        base_url="https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?ref=${{ github.ref }}&state=open"

        result_severity_check_high=$(curl -s -H "$content_header" -H "$auth_header" "${base_url}&severity=high")
        result_severity_check_critical=$(curl -s -H "$content_header" -H "$auth_header" "${base_url}&severity=critical")
        result_severity_check_error=$(curl -s -H "$content_header" -H "$auth_header" "${base_url}&severity=error")

        is_high_vuln_present=$([[ "$result_severity_check_high" =~ [a-zA-Z] ]] && echo "true" || echo "false")
        is_critical_vuln_present=$([[ "$result_severity_check_critical" =~ [a-zA-Z] || "$result_severity_check_error" =~ [a-zA-Z] ]] && echo "true" || echo "false")

        echo "is_high_vuln_present=$is_high_vuln_present" >> $GITHUB_OUTPUT
        echo "is_critical_vuln_present=$is_critical_vuln_present" >> $GITHUB_OUTPUT

    - name: Succeed or fail based on severity
      id: severity_check
      if: inputs.trivy == 'true' || inputs.tfsec == 'true'
      shell: bash
      run: |
        pr_number=$( echo ${{ env.BRANCH }} | sed 's/\/.*//');
        is_high_vuln_present=${{ steps.severity_check_outputs.outputs.is_high_vuln_present }}
        is_critical_vuln_present=${{ steps.severity_check_outputs.outputs.is_critical_vuln_present }}

        error_start_message="Error: Vulnerabilities were found of level"
        error_end_message="Go to the Code Scanning section of the GitHub Security tab to review these vulnerabilities."
        error_search_pr_message="Search for is:open pr:"$pr_number" to find PR related vulnerabilities."

        if [[ $is_high_vuln_present == 'false' &&  $is_critical_vuln_present == 'false' ]]
        then
          echo "Success! No high or critical code scanning alerts.";
          exit 0;
        fi

        if [[ ${{ env.ALLOW_SEVERITY_LEVEL }} == 'medium' ]]
        then
          if [[ ${{ env.EVENT_NAME }} == 'pull_request' ]]
          then
            echo ""$error_start_message" high or critical. "$error_end_message" "$error_search_pr_message"";
            exit 1;
          else
            echo ""$error_start_message" high or critical found on branch "${{ env.BRANCH }}". $error_end_message";
            exit 1;
          fi

        elif [[ ${{ env.ALLOW_SEVERITY_LEVEL }} == 'high' ]]
        then
          if [[ $is_critical_vuln_present == 'false' ]]
          then
            echo "Only high vulnerabilities detected! Allowing due to input ALLOW_SEVERITY_LEVEL being set to high.";
            exit 0;
          fi

          if [[ ${{ env.EVENT_NAME }} == 'pull_request' ]]
          then
            echo ""$error_start_message" critical. "$error_end_message" "$error_search_pr_message"";
            exit 1;
          else
            echo ""$error_start_message" critical found on "${{ env.BRANCH }}" branch. $error_end_message";
            exit 1;
          fi

        elif [[ ${{ env.ALLOW_SEVERITY_LEVEL }} == 'critical' ]]
        then
          echo "High or critical vulnerabilities detected! Allowing due to input ALLOW_SEVERITY_LEVEL being set to critical.";
          exit 0;

        else
          echo "Input ALLOW_SEVERITY_LEVEL was not one of the known values, found "${{ env.ALLOW_SEVERITY_LEVEL }}". If you see this message, please contact SKIP.";
          exit 1;
        fi
